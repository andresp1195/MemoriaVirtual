/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package memoriavirtual;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;


/**
 *
 * @author Jespi_000
 */
public class AyudaParaConfiguracion extends javax.swing.JFrame {

    /**
     * Creates new form AyudaParaConfiguracion
     */
    public AyudaParaConfiguracion() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        ArbolDeSecciones.getSelectionModel().setSelectionMode
                (TreeSelectionModel.SINGLE_TREE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        ArbolDeSecciones = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ayuda de Configuración");
        setMinimumSize(new java.awt.Dimension(1200, 450));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Ayuda");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Configuración Principal");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Fetch Policy");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Placement Policy");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Replacement Policy");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Resident Set Management");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Replacement Scope");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Cleaning Policy");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Load Control");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Configuración de Memorias");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Tamaño de Memoria Virtual");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Tamaño de Memoria Física");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Configuración de Muestreo");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Sistema de Iteración");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        ArbolDeSecciones.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        ArbolDeSecciones.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                ArbolDeSeccionesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(ArbolDeSecciones);

        TextArea.setColumns(20);
        TextArea.setLineWrap(true);
        TextArea.setRows(5);
        jScrollPane3.setViewportView(TextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ArbolDeSeccionesValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_ArbolDeSeccionesValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) ArbolDeSecciones.getLastSelectedPathComponent();
        switch (node.getUserObject().toString()){
            case "Fetch Policy":
                TextArea.setText("FETCH POLICY: \n\n"
                        + "Se define tamaño máximo por proceso en memoria física.\n" +
                        "	Demand: traer a memoria principal/física las páginas que necesito hasta cuando se hace la referencia a ellas. Cargar todo a memoria virtual (al principio).\n" +
                        "	Prepaging: cargar las primeras páginas de los procesos (2 x ej).");
                break;
            case "Placement Policy":
                TextArea.setText("PLACEMENT POLICY: \n\n" +
                        "Define cuál frame de la memoria física será el próximo a ser asignado a una página de un proceso.\n"+
                        "	First available: poner la página del proceso en el primer frame posible. \n" +
                        "	Next available: tomando en cuenta a donde puse el proceso anterior.");
                break;
            case "Replacement Policy":
                TextArea.setText("REPLACEMENT POLICY: \n\n"
                        + "Política que busca la página que se quita en memoria física (al realizar un reemplazo) sea la menos probable a ser referenciada.\n" +
                        "	LRU: proceso menos usado recientemente será reemplazado.\n" +
                        "	FIFO: primer proceso en entrar es el que se reemplaza.\n" +
                        "	Clock: se colocan los procesos de forma circular y se itera cíclicamente para sustituir procesos.\n" +
                        "	MRU: proceso más usado recientemente será reemplazado.");
                break;
            case "Replacement Scope":
                TextArea.setText("REPLACEMENT SCOPE: \n\n"
                        + "Define cómo se va a sustituir las páginas de los procesos en memoria física cuando se necesite realizar un reemplazo.\n" +
                        "	* Cuando no hay frames libres en memoria física, se habilitan local y global.\n\n" +
                        "	Local: sólo se podrán sustituir los frames del proceso.\n" +
                        "	Global: * No compatible con el working set fixed.\n" +
                        "		Se toma en cuenta el bit de bloqueo en los procesos del .txt");
                break;
            case "Resident Set Management":
                TextArea.setText("RESIDENT / WORKING SET MANAGEMENT: \n\n"
                        +"Define cómo se asignará las páginas de los procesos en uso en los frames de la memoria física.\n"+ 
                        "       Fixed: cierto número de frames fijos para cada proceso en memoria física.\n" +
                        "	Variable: se establece el número de frames que se le asignará a un proceso en su inicio, el número máximo de frames que podrá utilizar y la cantidad que crece por cada reemplazo. Puede causar fragmentación del proceso en el disco si hay procesos que se asignaron después de él.\n");
                break;
            case "Cleaning Policy":
                TextArea.setText("CLEANING POLICY: \n\n"
                        + "Define cuándo se actualizan las páginas de física a virtual al ser modificadas.\n" +
                        "	Demand: cuando se da un replacement.\n" +
                        "	Precleaning: actualiza las páginas modificadas cada 15 segundos.");
                break;
            case "Load Control":
                TextArea.setText("LOAD CONTROL: \n\n"+
                        "Grado de multiprogramación: especifica el número de procesos que se van a admitir en memoria.\n"+
                        "       Limitará el número de procesos que se ingresaron en el archivo .txt anteriormente especificado");
                break;
            case "Tamaño de Memoria Virtual":
                TextArea.setText("TAMAÑO DE MEMORIA VIRTUAL: \n\n"
                       +"Para configurar el tamaño de la memoria virtual se necesita un parámetro (número entre 24 y 27) que especifica una cantidad de bits destinadas para:\n"
                       +"       Bits Offset: especifican el tamaño de cada página en memoria virtual (siempre es 1MB pues 2^20Bytes = 1MB).\n"
                       +"               * Se ha limitado la cantidad de bits offset a 20, por lo que el parámetro que especificará debe ser mayor a 20 y menor a 27 para limitar el tamaño de la memoria virtual.\n"
                       +"       Bits de Páginas: especifican la cantidad de memoria que tendrá la memoria virtual y, por consecuencia, la cantidad de páginas de la memoria virtual.\n\n"
                       +"       Ejemplo:\n"
                       +"               Número especificado: 25.\n"
                       +"               Bits Offset: 20 (tamaño de página = 1MB ó 2^20).\n"
                       +"               Bits de Páginas: 25 - 20 = 5.\n\n"
                       +"               TAMAÑO TOTAL DE LA MEMORIA VIRTUAL: (2^5)*1MB = 32MB.\n"
                       +"               Total de páginas en la memoria virtual = 32.");
                break;
            case "Tamaño de Memoria Física":
                TextArea.setText("TAMAÑO DE MEMORIA FÍSICA: \n\n"
                       +"El número especificado de memoria física en MB causará que en memoria física hayan N frames (entre 1 y 16, para cumplir que sea menor que la memoria virtual), cada uno de 1MB.");
                break;
            case "Sistema de Iteración":
                TextArea.setText("SISTEMA DE ITERACIÓN: \n\n"+
                        "El número especificado causará que se lea y ejecute ese número de referencias por cada iteración del sistema.");
                break;
        }
    }//GEN-LAST:event_ArbolDeSeccionesValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AyudaParaConfiguracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AyudaParaConfiguracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AyudaParaConfiguracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AyudaParaConfiguracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AyudaParaConfiguracion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree ArbolDeSecciones;
    private javax.swing.JTextArea TextArea;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
